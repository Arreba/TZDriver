#pragma checksum "C:\Users\Chris\Desktop\TZDriver\TZDriver\Views\TripView.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "360052EB202020CAAF267A5D971422D7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TZDriver.Views
{
    partial class TripView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_Center(global::Windows.UI.Xaml.Controls.Maps.MapControl obj, global::Windows.Devices.Geolocation.Geopoint value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.Devices.Geolocation.Geopoint) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.Devices.Geolocation.Geopoint), targetNullValue);
                }
                obj.Center = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_Location(global::Windows.UI.Xaml.FrameworkElement obj, global::Windows.Devices.Geolocation.Geopoint value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.Devices.Geolocation.Geopoint) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.Devices.Geolocation.Geopoint), targetNullValue);
                }
                global::Windows.UI.Xaml.Controls.Maps.MapControl.SetLocation(obj, value);
            }
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_Heading(global::Windows.UI.Xaml.Controls.Maps.MapControl obj, global::System.Double value)
            {
                obj.Heading = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_ZoomLevel(global::Windows.UI.Xaml.Controls.Maps.MapControl obj, global::System.Double value)
            {
                obj.ZoomLevel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Maps_MapControl_DesiredPitch(global::Windows.UI.Xaml.Controls.Maps.MapControl obj, global::System.Double value)
            {
                obj.DesiredPitch = value;
            }
            public static void Set_TZDriver_Controls_Navigation_LocationAccuraccy(global::TZDriver.Controls.Navigation obj, global::System.Double value)
            {
                obj.LocationAccuraccy = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        private class TripView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ITripView_Bindings
        {
            private global::TZDriver.Views.TripView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Maps.MapControl obj3;
            private global::TZDriver.Controls.Navigation obj22;

            private TripView_obj1_BindingsTracking bindingsTracking;

            public TripView_obj1_Bindings()
            {
                this.bindingsTracking = new TripView_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\TripView.xaml line 70
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Maps.MapControl)target;
                        break;
                    case 22: // Views\TripView.xaml line 89
                        this.obj22 = (global::TZDriver.Controls.Navigation)target;
                        break;
                    default:
                        break;
                }
            }

            // ITripView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::TZDriver.Views.TripView)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::TZDriver.Views.TripView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_vm(obj.vm, phase);
                    }
                }
            }
            private void Update_vm(global::TZDriver.ViewModels.TripViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_vm(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_vm_CurrentTripDataRepo(obj.CurrentTripDataRepo, phase);
                    }
                }
            }
            private void Update_vm_CurrentTripDataRepo(global::TZDriver.Utilities.TripDataRepository obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_vm_CurrentTripDataRepo(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_vm_CurrentTripDataRepo_Geopoint(obj.Geopoint, phase);
                        this.Update_vm_CurrentTripDataRepo_Heading(obj.Heading, phase);
                        this.Update_vm_CurrentTripDataRepo_Zoom(obj.Zoom, phase);
                        this.Update_vm_CurrentTripDataRepo_Pitch(obj.Pitch, phase);
                        this.Update_vm_CurrentTripDataRepo_Accuracy(obj.Accuracy, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_vm_CurrentTripDataRepo_IsPositonAvailable(obj.IsPositonAvailable, phase);
                    }
                }
            }
            private void Update_vm_CurrentTripDataRepo_Geopoint(global::Windows.Devices.Geolocation.Geopoint obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\TripView.xaml line 70
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_Center(this.obj3, obj, null);
                    // Views\TripView.xaml line 89
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_Location(this.obj22, obj, null);
                }
            }
            private void Update_vm_CurrentTripDataRepo_Heading(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\TripView.xaml line 70
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_Heading(this.obj3, obj);
                }
            }
            private void Update_vm_CurrentTripDataRepo_Zoom(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\TripView.xaml line 70
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_ZoomLevel(this.obj3, obj);
                }
            }
            private void Update_vm_CurrentTripDataRepo_Pitch(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\TripView.xaml line 70
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Maps_MapControl_DesiredPitch(this.obj3, obj);
                }
            }
            private void Update_vm_CurrentTripDataRepo_Accuracy(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\TripView.xaml line 89
                    XamlBindingSetters.Set_TZDriver_Controls_Navigation_LocationAccuraccy(this.obj22, obj);
                }
            }
            private void Update_vm_CurrentTripDataRepo_IsPositonAvailable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\TripView.xaml line 89
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj22, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
            private class TripView_obj1_BindingsTracking
            {
                private global::System.WeakReference<TripView_obj1_Bindings> weakRefToBindingObj; 

                public TripView_obj1_BindingsTracking(TripView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TripView_obj1_Bindings>(obj);
                }

                public TripView_obj1_Bindings TryGetBindingObject()
                {
                    TripView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_vm(null);
                    UpdateChildListeners_vm_CurrentTripDataRepo(null);
                }

                public void PropertyChanged_vm(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TripView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::TZDriver.ViewModels.TripViewModel obj = sender as global::TZDriver.ViewModels.TripViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_vm_CurrentTripDataRepo(obj.CurrentTripDataRepo, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentTripDataRepo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_vm_CurrentTripDataRepo(obj.CurrentTripDataRepo, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::TZDriver.ViewModels.TripViewModel cache_vm = null;
                public void UpdateChildListeners_vm(global::TZDriver.ViewModels.TripViewModel obj)
                {
                    if (obj != cache_vm)
                    {
                        if (cache_vm != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_vm).PropertyChanged -= PropertyChanged_vm;
                            cache_vm = null;
                        }
                        if (obj != null)
                        {
                            cache_vm = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_vm;
                        }
                    }
                }
                public void PropertyChanged_vm_CurrentTripDataRepo(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TripView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::TZDriver.Utilities.TripDataRepository obj = sender as global::TZDriver.Utilities.TripDataRepository;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_vm_CurrentTripDataRepo_Geopoint(obj.Geopoint, DATA_CHANGED);
                                bindings.Update_vm_CurrentTripDataRepo_Heading(obj.Heading, DATA_CHANGED);
                                bindings.Update_vm_CurrentTripDataRepo_Zoom(obj.Zoom, DATA_CHANGED);
                                bindings.Update_vm_CurrentTripDataRepo_Pitch(obj.Pitch, DATA_CHANGED);
                                bindings.Update_vm_CurrentTripDataRepo_Accuracy(obj.Accuracy, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Geopoint":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_vm_CurrentTripDataRepo_Geopoint(obj.Geopoint, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Heading":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_vm_CurrentTripDataRepo_Heading(obj.Heading, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Zoom":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_vm_CurrentTripDataRepo_Zoom(obj.Zoom, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Pitch":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_vm_CurrentTripDataRepo_Pitch(obj.Pitch, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Accuracy":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_vm_CurrentTripDataRepo_Accuracy(obj.Accuracy, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::TZDriver.Utilities.TripDataRepository cache_vm_CurrentTripDataRepo = null;
                public void UpdateChildListeners_vm_CurrentTripDataRepo(global::TZDriver.Utilities.TripDataRepository obj)
                {
                    if (obj != cache_vm_CurrentTripDataRepo)
                    {
                        if (cache_vm_CurrentTripDataRepo != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_vm_CurrentTripDataRepo).PropertyChanged -= PropertyChanged_vm_CurrentTripDataRepo;
                            cache_vm_CurrentTripDataRepo = null;
                        }
                        if (obj != null)
                        {
                            cache_vm_CurrentTripDataRepo = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_vm_CurrentTripDataRepo;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\TripView.xaml line 37
                {
                    this.disPatchGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3: // Views\TripView.xaml line 70
                {
                    this.drivewMap = (global::Windows.UI.Xaml.Controls.Maps.MapControl)(target);
                }
                break;
            case 4: // Views\TripView.xaml line 95
                {
                    this.TripValuesView = (global::TZDriver.Models.Controls.TripViewControl)(target);
                }
                break;
            case 5: // Views\TripView.xaml line 394
                {
                    this.pickupControl = (global::TZDriver.Controls.PickupControl)(target);
                }
                break;
            case 6: // Views\TripView.xaml line 405
                {
                    this.navigationGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 7: // Views\TripView.xaml line 414
                {
                    this.startButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 8: // Views\TripView.xaml line 437
                {
                    this.reachButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 9: // Views\TripView.xaml line 560
                {
                    this.stopButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 10: // Views\TripView.xaml line 485
                {
                    this.callMTN = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 11: // Views\TripView.xaml line 509
                {
                    this.callClient = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 12: // Views\TripView.xaml line 532
                {
                    this.callEtisalat = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 13: // Views\TripView.xaml line 108
                {
                    this.fareGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 14: // Views\TripView.xaml line 207
                {
                    this.timeGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 15: // Views\TripView.xaml line 372
                {
                    this.driveDistance = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 16: // Views\TripView.xaml line 242
                {
                    this.driveHour = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 17: // Views\TripView.xaml line 253
                {
                    this.bigFareTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // Views\TripView.xaml line 298
                {
                    this.driveMunite = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 19: // Views\TripView.xaml line 309
                {
                    this.smallFareTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 20: // Views\TripView.xaml line 329
                {
                    this.driveSecond = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 21: // Views\TripView.xaml line 134
                {
                    this.tripFare = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 22: // Views\TripView.xaml line 89
                {
                    this.NavigationPin = (global::TZDriver.Controls.Navigation)(target);
                }
                break;
            case 23: // Views\TripView.xaml line 44
                {
                    this.routeIconGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 24: // Views\TripView.xaml line 57
                {
                    this.routeTextGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 25: // Views\TripView.xaml line 52
                {
                    this.routeIconBox = (global::Windows.UI.Xaml.Controls.Viewbox)(target);
                }
                break;
            case 26: // Views\TripView.xaml line 54
                {
                    this.routeDistanceRemaining = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 27: // Views\TripView.xaml line 585
                {
                    this.DriveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 28: // Views\TripView.xaml line 586
                {
                    this.PickupState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 29: // Views\TripView.xaml line 605
                {
                    this.TripStarted = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 30: // Views\TripView.xaml line 629
                {
                    this.TripCompleted = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 31: // Views\TripView.xaml line 641
                {
                    this.FreeState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// UnloadObject(DependencyObject)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        partial void UnloadObject(global::Windows.UI.Xaml.DependencyObject unloadableObject)
        {
            if (unloadableObject != null)
            {
                // Views\TripView.xaml line 95
                if (unloadableObject == this.TripValuesView)
                { 
                    this.DisconnectUnloadedObject(4);
                }
                // Views\TripView.xaml line 394
                if (unloadableObject == this.pickupControl)
                { 
                    this.DisconnectUnloadedObject(5);
                }
                global::Windows.UI.Xaml.Markup.XamlMarkupHelper.UnloadObject(unloadableObject);
            }
        }

        /// <summary>
        /// DisconnectUnloadedObject(int connectionId)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void DisconnectUnloadedObject(int connectionId)
        {
            switch(connectionId)
            {
                case 4: // Views\TripView.xaml line 95
                {
                    this.DisconnectUnloadedObject(13);
                    this.DisconnectUnloadedObject(14);
                    this.TripValuesView = null;
                    break;
                }
                case 5: // Views\TripView.xaml line 394
                {
                    this.pickupControl = null;
                    break;
                }
                case 13: // Views\TripView.xaml line 108
                {
                    this.DisconnectUnloadedObject(21);
                    this.fareGrid = null;
                    break;
                }
                case 14: // Views\TripView.xaml line 207
                {
                    this.DisconnectUnloadedObject(15);
                    this.DisconnectUnloadedObject(16);
                    this.DisconnectUnloadedObject(17);
                    this.DisconnectUnloadedObject(18);
                    this.DisconnectUnloadedObject(19);
                    this.DisconnectUnloadedObject(20);
                    this.timeGrid = null;
                    break;
                }
                case 15: // Views\TripView.xaml line 372
                {
                    this.driveDistance = null;
                    break;
                }
                case 16: // Views\TripView.xaml line 242
                {
                    this.driveHour = null;
                    break;
                }
                case 17: // Views\TripView.xaml line 253
                {
                    this.bigFareTextBlock = null;
                    break;
                }
                case 18: // Views\TripView.xaml line 298
                {
                    this.driveMunite = null;
                    break;
                }
                case 19: // Views\TripView.xaml line 309
                {
                    this.smallFareTextBlock = null;
                    break;
                }
                case 20: // Views\TripView.xaml line 329
                {
                    this.driveSecond = null;
                    break;
                }
                case 21: // Views\TripView.xaml line 134
                {
                    this.tripFare = null;
                    break;
                }
                default:
                {
                    throw new global::System.ArgumentException("Invalid connectionId.");
                }
            }
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\TripView.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    TripView_obj1_Bindings bindings = new TripView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

