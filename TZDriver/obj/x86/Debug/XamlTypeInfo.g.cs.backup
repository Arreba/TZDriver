//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace TZDriver
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace TZDriver.TZDriver_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[101];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.StateItems";
            _typeNameTable[3] = "System.Collections.Generic.Dictionary`2<String, Object>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[7] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[8] = "System.MulticastDelegate";
            _typeNameTable[9] = "System.Delegate";
            _typeNameTable[10] = "TimeSpan";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[14] = "Template10.Common.BootStrapper.States";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "Template10.Controls.ModalDialog";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[18] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[19] = "TZDriver.ViewModels.ViewModelLocator";
            _typeNameTable[20] = "TZDriver.ViewModels.ActiveTripViewModel";
            _typeNameTable[21] = "TZDriver.ViewModels.BaseViewModel";
            _typeNameTable[22] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[23] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[24] = "TZDriver.ViewModels.TripViewModel";
            _typeNameTable[25] = "TZDriver.ViewModels.ClosedTripViewModel";
            _typeNameTable[26] = "TZDriver.Models.Tools.Converters.DateTimeToLongDateConverter";
            _typeNameTable[27] = "TZDriver.Models.Tools.Converters.NameConverter";
            _typeNameTable[28] = "TZDriver.Models.Tools.Converters.TimeInListConverter";
            _typeNameTable[29] = "TZDriver.Models.Tools.Converters.TimeInListToAMPMConverter";
            _typeNameTable[30] = "TZDriver.Models.Tools.Converters.NullToVisibilityConverter";
            _typeNameTable[31] = "TZDriver.Models.Tools.Converters.StringFormatConverter";
            _typeNameTable[32] = "TZDriver.Models.Tools.Converters.TimespanToDurationConverter";
            _typeNameTable[33] = "TZDriver.Models.Tools.Converters.TripStateColorConverter";
            _typeNameTable[34] = "TZDriver.Models.Tools.Converters.TripTypeIconConverter";
            _typeNameTable[35] = "TZDriver.Models.Controls.TextboxControl";
            _typeNameTable[36] = "Windows.UI.Xaml.Controls.TextBox";
            _typeNameTable[37] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[38] = "TZDriver.Controls.AddJobDialog";
            _typeNameTable[39] = "Windows.UI.Xaml.Controls.ContentDialog";
            _typeNameTable[40] = "Windows.UI.Xaml.Controls.ContentDialogResult";
            _typeNameTable[41] = "TZDriver.Models.DataModels.TripData";
            _typeNameTable[42] = "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.ServiceType>";
            _typeNameTable[43] = "TZDriver.Models.Tools.Utilities.ServiceType";
            _typeNameTable[44] = "TZDriver.Models.Tools.Utilities.TripPayMode";
            _typeNameTable[45] = "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayMode>";
            _typeNameTable[46] = "Int32";
            _typeNameTable[47] = "TZDriver.Controls.CountdownControl";
            _typeNameTable[48] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[49] = "TZDriver.Controls.BeginDialog";
            _typeNameTable[50] = "TZDriver.Models.Controls.TripViewControl";
            _typeNameTable[51] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[52] = "System.Collections.Generic.List`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[53] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[54] = "TZDriver.Models.Tools.Utilities.RotateAxis";
            _typeNameTable[55] = "TZDriver.Models.Tools.Utilities.Direction";
            _typeNameTable[56] = "Double";
            _typeNameTable[57] = "XamlBrewer.Uwp.Controls.BackDrop";
            _typeNameTable[58] = "Windows.UI.Color";
            _typeNameTable[59] = "TZDriver.Models.Controls.RingSlice";
            _typeNameTable[60] = "Windows.UI.Xaml.Shapes.Path";
            _typeNameTable[61] = "System.Nullable`1<Windows.Foundation.Point>";
            _typeNameTable[62] = "TZDriver.Controls.EndDialog";
            _typeNameTable[63] = "TZDriver.Models.Tools.Utilities.TripPayStatus";
            _typeNameTable[64] = "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayStatus>";
            _typeNameTable[65] = "TZDriver.Controls.FakeFareControl";
            _typeNameTable[66] = "TZDriver.Controls.Navigation";
            _typeNameTable[67] = "XamlBrewer.Uwp.Controls.Rating";
            _typeNameTable[68] = "System.Uri";
            _typeNameTable[69] = "TZDriver.Controls.PickupControl";
            _typeNameTable[70] = "Windows.UI.Xaml.Media.GradientBrush";
            _typeNameTable[71] = "TZDriver.Controls.TripMapControl";
            _typeNameTable[72] = "TZDriver.Controls.TripSummary";
            _typeNameTable[73] = "Byte";
            _typeNameTable[74] = "Template10.Controls.PageHeader";
            _typeNameTable[75] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[76] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[77] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[78] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[79] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[80] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[81] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[82] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[83] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[84] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[85] = "Microsoft.Xaml.Interactivity.Trigger";
            _typeNameTable[86] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[87] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[88] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[89] = "System.Windows.Input.ICommand";
            _typeNameTable[90] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[91] = "TZDriver.Views.ClosedTripView";
            _typeNameTable[92] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[93] = "TZDriver.Views.ActiveTripView";
            _typeNameTable[94] = "Template10.Converters.ValueWhenConverter";
            _typeNameTable[95] = "TZDriver.Models.Tools.Helpers.FlyoutHelper";
            _typeNameTable[96] = "System.Collections.Generic.IList`1<Windows.UI.Xaml.DependencyObject>";
            _typeNameTable[97] = "TZDriver.Utilities.DriveStateTrigger";
            _typeNameTable[98] = "Windows.UI.Xaml.StateTriggerBase";
            _typeNameTable[99] = "TZDriver.Models.Tools.Utilities.DriveStateStatus";
            _typeNameTable[100] = "TZDriver.Views.TripView";

            _typeTable = new global::System.Type[101];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.StateItems);
            _typeTable[3] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[7] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[8] = typeof(global::System.MulticastDelegate);
            _typeTable[9] = typeof(global::System.Delegate);
            _typeTable[10] = typeof(global::System.TimeSpan);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[14] = typeof(global::Template10.Common.BootStrapper.States);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[19] = typeof(global::TZDriver.ViewModels.ViewModelLocator);
            _typeTable[20] = typeof(global::TZDriver.ViewModels.ActiveTripViewModel);
            _typeTable[21] = typeof(global::TZDriver.ViewModels.BaseViewModel);
            _typeTable[22] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[23] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[24] = typeof(global::TZDriver.ViewModels.TripViewModel);
            _typeTable[25] = typeof(global::TZDriver.ViewModels.ClosedTripViewModel);
            _typeTable[26] = typeof(global::TZDriver.Models.Tools.Converters.DateTimeToLongDateConverter);
            _typeTable[27] = typeof(global::TZDriver.Models.Tools.Converters.NameConverter);
            _typeTable[28] = typeof(global::TZDriver.Models.Tools.Converters.TimeInListConverter);
            _typeTable[29] = typeof(global::TZDriver.Models.Tools.Converters.TimeInListToAMPMConverter);
            _typeTable[30] = typeof(global::TZDriver.Models.Tools.Converters.NullToVisibilityConverter);
            _typeTable[31] = typeof(global::TZDriver.Models.Tools.Converters.StringFormatConverter);
            _typeTable[32] = typeof(global::TZDriver.Models.Tools.Converters.TimespanToDurationConverter);
            _typeTable[33] = typeof(global::TZDriver.Models.Tools.Converters.TripStateColorConverter);
            _typeTable[34] = typeof(global::TZDriver.Models.Tools.Converters.TripTypeIconConverter);
            _typeTable[35] = typeof(global::TZDriver.Models.Controls.TextboxControl);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Controls.TextBox);
            _typeTable[37] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[38] = typeof(global::TZDriver.Controls.AddJobDialog);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Controls.ContentDialog);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.Controls.ContentDialogResult);
            _typeTable[41] = typeof(global::TZDriver.Models.DataModels.TripData);
            _typeTable[42] = typeof(global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.ServiceType>);
            _typeTable[43] = typeof(global::TZDriver.Models.Tools.Utilities.ServiceType);
            _typeTable[44] = typeof(global::TZDriver.Models.Tools.Utilities.TripPayMode);
            _typeTable[45] = typeof(global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayMode>);
            _typeTable[46] = typeof(global::System.Int32);
            _typeTable[47] = typeof(global::TZDriver.Controls.CountdownControl);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[49] = typeof(global::TZDriver.Controls.BeginDialog);
            _typeTable[50] = typeof(global::TZDriver.Models.Controls.TripViewControl);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[52] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[53] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[54] = typeof(global::TZDriver.Models.Tools.Utilities.RotateAxis);
            _typeTable[55] = typeof(global::TZDriver.Models.Tools.Utilities.Direction);
            _typeTable[56] = typeof(global::System.Double);
            _typeTable[57] = typeof(global::XamlBrewer.Uwp.Controls.BackDrop);
            _typeTable[58] = typeof(global::Windows.UI.Color);
            _typeTable[59] = typeof(global::TZDriver.Models.Controls.RingSlice);
            _typeTable[60] = typeof(global::Windows.UI.Xaml.Shapes.Path);
            _typeTable[61] = typeof(global::System.Nullable<global::Windows.Foundation.Point>);
            _typeTable[62] = typeof(global::TZDriver.Controls.EndDialog);
            _typeTable[63] = typeof(global::TZDriver.Models.Tools.Utilities.TripPayStatus);
            _typeTable[64] = typeof(global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayStatus>);
            _typeTable[65] = typeof(global::TZDriver.Controls.FakeFareControl);
            _typeTable[66] = typeof(global::TZDriver.Controls.Navigation);
            _typeTable[67] = typeof(global::XamlBrewer.Uwp.Controls.Rating);
            _typeTable[68] = typeof(global::System.Uri);
            _typeTable[69] = typeof(global::TZDriver.Controls.PickupControl);
            _typeTable[70] = typeof(global::Windows.UI.Xaml.Media.GradientBrush);
            _typeTable[71] = typeof(global::TZDriver.Controls.TripMapControl);
            _typeTable[72] = typeof(global::TZDriver.Controls.TripSummary);
            _typeTable[73] = typeof(global::System.Byte);
            _typeTable[74] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[75] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[76] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[77] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[78] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[79] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[80] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[81] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[82] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[83] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[84] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[85] = typeof(global::Microsoft.Xaml.Interactivity.Trigger);
            _typeTable[86] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[87] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[88] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[89] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[90] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[91] = typeof(global::TZDriver.Views.ClosedTripView);
            _typeTable[92] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[93] = typeof(global::TZDriver.Views.ActiveTripView);
            _typeTable[94] = typeof(global::Template10.Converters.ValueWhenConverter);
            _typeTable[95] = typeof(global::TZDriver.Models.Tools.Helpers.FlyoutHelper);
            _typeTable[96] = typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.DependencyObject>);
            _typeTable[97] = typeof(global::TZDriver.Utilities.DriveStateTrigger);
            _typeTable[98] = typeof(global::Windows.UI.Xaml.StateTriggerBase);
            _typeTable[99] = typeof(global::TZDriver.Models.Tools.Utilities.DriveStateStatus);
            _typeTable[100] = typeof(global::TZDriver.Views.TripView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_StateItems() { return new global::Template10.Common.StateItems(); }
        private object Activate_3_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>(); }
        private object Activate_16_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_19_ViewModelLocator() { return new global::TZDriver.ViewModels.ViewModelLocator(); }
        private object Activate_20_ActiveTripViewModel() { return new global::TZDriver.ViewModels.ActiveTripViewModel(); }
        private object Activate_21_BaseViewModel() { return new global::TZDriver.ViewModels.BaseViewModel(); }
        private object Activate_23_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_25_ClosedTripViewModel() { return new global::TZDriver.ViewModels.ClosedTripViewModel(); }
        private object Activate_26_DateTimeToLongDateConverter() { return new global::TZDriver.Models.Tools.Converters.DateTimeToLongDateConverter(); }
        private object Activate_27_NameConverter() { return new global::TZDriver.Models.Tools.Converters.NameConverter(); }
        private object Activate_28_TimeInListConverter() { return new global::TZDriver.Models.Tools.Converters.TimeInListConverter(); }
        private object Activate_29_TimeInListToAMPMConverter() { return new global::TZDriver.Models.Tools.Converters.TimeInListToAMPMConverter(); }
        private object Activate_30_NullToVisibilityConverter() { return new global::TZDriver.Models.Tools.Converters.NullToVisibilityConverter(); }
        private object Activate_31_StringFormatConverter() { return new global::TZDriver.Models.Tools.Converters.StringFormatConverter(); }
        private object Activate_32_TimespanToDurationConverter() { return new global::TZDriver.Models.Tools.Converters.TimespanToDurationConverter(); }
        private object Activate_33_TripStateColorConverter() { return new global::TZDriver.Models.Tools.Converters.TripStateColorConverter(); }
        private object Activate_34_TripTypeIconConverter() { return new global::TZDriver.Models.Tools.Converters.TripTypeIconConverter(); }
        private object Activate_35_TextboxControl() { return new global::TZDriver.Models.Controls.TextboxControl(); }
        private object Activate_38_AddJobDialog() { return new global::TZDriver.Controls.AddJobDialog(); }
        private object Activate_41_TripData() { return new global::TZDriver.Models.DataModels.TripData(); }
        private object Activate_42_List() { return new global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.ServiceType>(); }
        private object Activate_45_List() { return new global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayMode>(); }
        private object Activate_47_CountdownControl() { return new global::TZDriver.Controls.CountdownControl(); }
        private object Activate_49_BeginDialog() { return new global::TZDriver.Controls.BeginDialog(); }
        private object Activate_50_TripViewControl() { return new global::TZDriver.Models.Controls.TripViewControl(); }
        private object Activate_52_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Xaml.FrameworkElement>(); }
        private object Activate_57_BackDrop() { return new global::XamlBrewer.Uwp.Controls.BackDrop(); }
        private object Activate_59_RingSlice() { return new global::TZDriver.Models.Controls.RingSlice(); }
        private object Activate_62_EndDialog() { return new global::TZDriver.Controls.EndDialog(); }
        private object Activate_64_List() { return new global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayStatus>(); }
        private object Activate_65_FakeFareControl() { return new global::TZDriver.Controls.FakeFareControl(); }
        private object Activate_66_Navigation() { return new global::TZDriver.Controls.Navigation(); }
        private object Activate_67_Rating() { return new global::XamlBrewer.Uwp.Controls.Rating(); }
        private object Activate_69_PickupControl() { return new global::TZDriver.Controls.PickupControl(); }
        private object Activate_71_TripMapControl() { return new global::TZDriver.Controls.TripMapControl(); }
        private object Activate_72_TripSummary() { return new global::TZDriver.Controls.TripSummary(); }
        private object Activate_74_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_81_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_84_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_87_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_88_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_91_ClosedTripView() { return new global::TZDriver.Views.ClosedTripView(); }
        private object Activate_93_ActiveTripView() { return new global::TZDriver.Views.ActiveTripView(); }
        private object Activate_94_ValueWhenConverter() { return new global::Template10.Converters.ValueWhenConverter(); }
        private object Activate_97_DriveStateTrigger() { return new global::TZDriver.Utilities.DriveStateTrigger(); }
        private object Activate_100_TripView() { return new global::TZDriver.Views.TripView(); }
        private void MapAdd_2_StateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_42_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::TZDriver.Models.Tools.Utilities.ServiceType>)instance;
            var newItem = (global::TZDriver.Models.Tools.Utilities.ServiceType)item;
            collection.Add(newItem);
        }
        private void VectorAdd_45_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::TZDriver.Models.Tools.Utilities.TripPayMode>)instance;
            var newItem = (global::TZDriver.Models.Tools.Utilities.TripPayMode)item;
            collection.Add(newItem);
        }
        private void VectorAdd_52_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.FrameworkElement>)instance;
            var newItem = (global::Windows.UI.Xaml.FrameworkElement)item;
            collection.Add(newItem);
        }
        private void VectorAdd_64_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::TZDriver.Models.Tools.Utilities.TripPayStatus>)instance;
            var newItem = (global::TZDriver.Models.Tools.Utilities.TripPayStatus)item;
            collection.Add(newItem);
        }
        private void VectorAdd_81_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_87_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_96_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("AutoRestoreAfterTerminated");
                userType.AddMemberName("AutoExtendExecutionSession");
                userType.AddMemberName("AutoSuspendAllFrames");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.StateItems
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.Dictionary`2<String, Object>"));
                userType.DictionaryAdd = MapAdd_2_StateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Collections.Generic.Dictionary`2<String, Object>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Dictionary;
                userType.DictionaryAdd = MapAdd_3_Dictionary;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.MulticastDelegate
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 9:   //  System.Delegate
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  TimeSpan
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Boolean
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Template10.Common.BootStrapper.States
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Common.BootStrapper.States.None);
                userType.AddEnumValue("Running", global::Template10.Common.BootStrapper.States.Running);
                userType.AddEnumValue("BeforeInit", global::Template10.Common.BootStrapper.States.BeforeInit);
                userType.AddEnumValue("AfterInit", global::Template10.Common.BootStrapper.States.AfterInit);
                userType.AddEnumValue("BeforeLaunch", global::Template10.Common.BootStrapper.States.BeforeLaunch);
                userType.AddEnumValue("AfterLaunch", global::Template10.Common.BootStrapper.States.AfterLaunch);
                userType.AddEnumValue("BeforeActivate", global::Template10.Common.BootStrapper.States.BeforeActivate);
                userType.AddEnumValue("AfterActivate", global::Template10.Common.BootStrapper.States.AfterActivate);
                userType.AddEnumValue("BeforeStart", global::Template10.Common.BootStrapper.States.BeforeStart);
                userType.AddEnumValue("AfterStart", global::Template10.Common.BootStrapper.States.AfterStart);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Controls.ModalDialog
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  TZDriver.ViewModels.ViewModelLocator
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_ViewModelLocator;
                userType.AddMemberName("ActivePage");
                userType.AddMemberName("TripPage");
                userType.AddMemberName("ClosedPage");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  TZDriver.ViewModels.ActiveTripViewModel
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("TZDriver.ViewModels.BaseViewModel"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  TZDriver.ViewModels.BaseViewModel
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_21_BaseViewModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 23:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_ObservableObject;
                xamlType = userType;
                break;

            case 24:   //  TZDriver.ViewModels.TripViewModel
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("TZDriver.ViewModels.BaseViewModel"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  TZDriver.ViewModels.ClosedTripViewModel
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("TZDriver.ViewModels.BaseViewModel"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  TZDriver.Models.Tools.Converters.DateTimeToLongDateConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_DateTimeToLongDateConverter;
                xamlType = userType;
                break;

            case 27:   //  TZDriver.Models.Tools.Converters.NameConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_NameConverter;
                xamlType = userType;
                break;

            case 28:   //  TZDriver.Models.Tools.Converters.TimeInListConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_28_TimeInListConverter;
                xamlType = userType;
                break;

            case 29:   //  TZDriver.Models.Tools.Converters.TimeInListToAMPMConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_TimeInListToAMPMConverter;
                xamlType = userType;
                break;

            case 30:   //  TZDriver.Models.Tools.Converters.NullToVisibilityConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_NullToVisibilityConverter;
                xamlType = userType;
                break;

            case 31:   //  TZDriver.Models.Tools.Converters.StringFormatConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_31_StringFormatConverter;
                xamlType = userType;
                break;

            case 32:   //  TZDriver.Models.Tools.Converters.TimespanToDurationConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_32_TimespanToDurationConverter;
                xamlType = userType;
                break;

            case 33:   //  TZDriver.Models.Tools.Converters.TripStateColorConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_TripStateColorConverter;
                xamlType = userType;
                break;

            case 34:   //  TZDriver.Models.Tools.Converters.TripTypeIconConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_34_TripTypeIconConverter;
                xamlType = userType;
                break;

            case 35:   //  TZDriver.Models.Controls.TextboxControl
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_35_TextboxControl;
                userType.AddMemberName("BackgroundOverlay");
                userType.AddMemberName("ForegroundOverlay");
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Controls.TextBox
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  TZDriver.Controls.AddJobDialog
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_38_AddJobDialog;
                userType.AddMemberName("DiagResult");
                userType.AddMemberName("NewTrip");
                userType.AddMemberName("JobTypeList");
                userType.AddMemberName("SelectedJobType");
                userType.AddMemberName("SelectedPayMode");
                userType.AddMemberName("PayModeList");
                userType.AddMemberName("DefaultIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.Controls.ContentDialog
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Windows.UI.Xaml.Controls.ContentDialogResult
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  TZDriver.Models.DataModels.TripData
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.ServiceType>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_42_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  TZDriver.Models.Tools.Utilities.ServiceType
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Hours", global::TZDriver.Models.Tools.Utilities.ServiceType.Hours);
                userType.AddEnumValue("Airport", global::TZDriver.Models.Tools.Utilities.ServiceType.Airport);
                userType.AddEnumValue("SchoolRun", global::TZDriver.Models.Tools.Utilities.ServiceType.SchoolRun);
                userType.AddEnumValue("Travel", global::TZDriver.Models.Tools.Utilities.ServiceType.Travel);
                userType.AddEnumValue("FullDay", global::TZDriver.Models.Tools.Utilities.ServiceType.FullDay);
                xamlType = userType;
                break;

            case 44:   //  TZDriver.Models.Tools.Utilities.TripPayMode
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Cash", global::TZDriver.Models.Tools.Utilities.TripPayMode.Cash);
                userType.AddEnumValue("POS", global::TZDriver.Models.Tools.Utilities.TripPayMode.POS);
                userType.AddEnumValue("Transfer", global::TZDriver.Models.Tools.Utilities.TripPayMode.Transfer);
                xamlType = userType;
                break;

            case 45:   //  System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayMode>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_45_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  Int32
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  TZDriver.Controls.CountdownControl
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_CountdownControl;
                userType.AddMemberName("Seconds");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  TZDriver.Controls.BeginDialog
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_49_BeginDialog;
                userType.AddMemberName("DiagResult");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  TZDriver.Models.Controls.TripViewControl
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_50_TripViewControl;
                userType.AddMemberName("Views");
                userType.AddMemberName("DisplayIndex");
                userType.AddMemberName("AllowTapToFlip");
                userType.AddMemberName("RotationAxis");
                userType.AddMemberName("FlipDirection");
                userType.AddMemberName("AnimationDuration");
                userType.AddMemberName("EnablePerspect");
                userType.AddMemberName("TripDuration");
                xamlType = userType;
                break;

            case 51:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  System.Collections.Generic.List`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_52_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  TZDriver.Models.Tools.Utilities.RotateAxis
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Y", global::TZDriver.Models.Tools.Utilities.RotateAxis.Y);
                userType.AddEnumValue("X", global::TZDriver.Models.Tools.Utilities.RotateAxis.X);
                xamlType = userType;
                break;

            case 55:   //  TZDriver.Models.Tools.Utilities.Direction
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("FrontToBack", global::TZDriver.Models.Tools.Utilities.Direction.FrontToBack);
                userType.AddEnumValue("BackToFront", global::TZDriver.Models.Tools.Utilities.Direction.BackToFront);
                xamlType = userType;
                break;

            case 56:   //  Double
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  XamlBrewer.Uwp.Controls.BackDrop
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_57_BackDrop;
                userType.AddMemberName("BlurAmount");
                userType.AddMemberName("TintColor");
                userType.AddMemberName("TintAlpha");
                userType.AddMemberName("SaturationIntensity");
                xamlType = userType;
                break;

            case 58:   //  Windows.UI.Color
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 59:   //  TZDriver.Models.Controls.RingSlice
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Shapes.Path"));
                userType.Activator = Activate_59_RingSlice;
                userType.AddMemberName("InnerRadius");
                userType.AddMemberName("Radius");
                userType.AddMemberName("StartAngle");
                userType.AddMemberName("EndAngle");
                userType.AddMemberName("Center");
                xamlType = userType;
                break;

            case 60:   //  Windows.UI.Xaml.Shapes.Path
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 61:   //  System.Nullable`1<Windows.Foundation.Point>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  TZDriver.Controls.EndDialog
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_62_EndDialog;
                userType.AddMemberName("DiagResult");
                userType.AddMemberName("SelectedPayMode");
                userType.AddMemberName("PayModeList");
                userType.AddMemberName("SelectedPayStatus");
                userType.AddMemberName("PayStatusList");
                userType.AddMemberName("DefaultIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  TZDriver.Models.Tools.Utilities.TripPayStatus
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Paid", global::TZDriver.Models.Tools.Utilities.TripPayStatus.Paid);
                userType.AddEnumValue("Awaiting", global::TZDriver.Models.Tools.Utilities.TripPayStatus.Awaiting);
                userType.AddEnumValue("NotPaid", global::TZDriver.Models.Tools.Utilities.TripPayStatus.NotPaid);
                xamlType = userType;
                break;

            case 64:   //  System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayStatus>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_64_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 65:   //  TZDriver.Controls.FakeFareControl
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_65_FakeFareControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  TZDriver.Controls.Navigation
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_66_Navigation;
                userType.AddMemberName("LocationAccuraccy");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  XamlBrewer.Uwp.Controls.Rating
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_67_Rating;
                userType.AddMemberName("Maximum");
                userType.AddMemberName("EmptyImage");
                userType.AddMemberName("FilledImage");
                userType.AddMemberName("IsInteractive");
                userType.AddMemberName("ItemHeight");
                userType.AddMemberName("ItemPadding");
                userType.AddMemberName("StepFrequency");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 68:   //  System.Uri
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 69:   //  TZDriver.Controls.PickupControl
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_69_PickupControl;
                userType.AddMemberName("Radius");
                userType.AddMemberName("SegmentColor");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("RemainMinutes");
                userType.AddMemberName("Angle");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  Windows.UI.Xaml.Media.GradientBrush
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 71:   //  TZDriver.Controls.TripMapControl
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_71_TripMapControl;
                userType.AddMemberName("DiagResult");
                userType.AddMemberName("SelectedPayMode");
                userType.AddMemberName("SelectedPayStatus");
                userType.AddMemberName("TripDistance");
                userType.AddMemberName("IsBusy");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 72:   //  TZDriver.Controls.TripSummary
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_72_TripSummary;
                userType.AddMemberName("IsBusy");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  Byte
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 74:   //  Template10.Controls.PageHeader
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_74_PageHeader;
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("Frame");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 75:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 76:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 77:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 78:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 79:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 80:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 81:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_81_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 82:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 83:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger"));
                userType.Activator = Activate_84_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                xamlType = userType;
                break;

            case 85:   //  Microsoft.Xaml.Interactivity.Trigger
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.SetContentPropertyName("Microsoft.Xaml.Interactivity.Trigger.Actions");
                userType.AddMemberName("Actions");
                xamlType = userType;
                break;

            case 86:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 87:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_87_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 88:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_88_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 89:   //  System.Windows.Input.ICommand
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 90:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 91:   //  TZDriver.Views.ClosedTripView
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_91_ClosedTripView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 92:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 93:   //  TZDriver.Views.ActiveTripView
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_93_ActiveTripView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 94:   //  Template10.Converters.ValueWhenConverter
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_94_ValueWhenConverter;
                userType.AddMemberName("When");
                userType.AddMemberName("Value");
                userType.AddMemberName("Otherwise");
                userType.AddMemberName("OtherwiseValueBack");
                userType.AddMemberName("Debug");
                xamlType = userType;
                break;

            case 95:   //  TZDriver.Models.Tools.Helpers.FlyoutHelper
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("Parent");
                xamlType = userType;
                break;

            case 96:   //  System.Collections.Generic.IList`1<Windows.UI.Xaml.DependencyObject>
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_96_IList;
                xamlType = userType;
                break;

            case 97:   //  TZDriver.Utilities.DriveStateTrigger
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.StateTriggerBase"));
                userType.Activator = Activate_97_DriveStateTrigger;
                userType.AddMemberName("DriveState");
                userType.AddMemberName("DriveStatus");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 98:   //  Windows.UI.Xaml.StateTriggerBase
                xamlType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 99:   //  TZDriver.Models.Tools.Utilities.DriveStateStatus
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("PickupState", global::TZDriver.Models.Tools.Utilities.DriveStateStatus.PickupState);
                userType.AddEnumValue("TripStarted", global::TZDriver.Models.Tools.Utilities.DriveStateStatus.TripStarted);
                userType.AddEnumValue("TripCompleted", global::TZDriver.Models.Tools.Utilities.DriveStateStatus.TripCompleted);
                userType.AddEnumValue("FreeState", global::TZDriver.Models.Tools.Utilities.DriveStateStatus.FreeState);
                xamlType = userType;
                break;

            case 100:   //  TZDriver.Views.TripView
                userType = new global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_100_TripView;
                userType.AddMemberName("vm");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Acr.UserDialogs.Acr_UserDialogs_Uwp_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Coding4Fun.Toolkit.Controls.Coding4Fun_Toolkit_Controls__Win8_1__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::XamlBrewer.Uwp.Controls.XamlBrewer_Uwp_Rating_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.StateItems)Value;
        }
        private object get_1_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_2_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_3_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_3_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_4_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_4_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_5_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_5_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_6_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_7_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_7_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootStrapper.States)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
#pragma warning restore 0618
        private object get_9_BootStrapper_AutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoRestoreAfterTerminated;
        }
        private void set_9_BootStrapper_AutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_10_BootStrapper_AutoExtendExecutionSession(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoExtendExecutionSession;
        }
        private void set_10_BootStrapper_AutoExtendExecutionSession(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoExtendExecutionSession = (global::System.Boolean)Value;
        }
        private object get_11_BootStrapper_AutoSuspendAllFrames(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoSuspendAllFrames;
        }
        private void set_11_BootStrapper_AutoSuspendAllFrames(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoSuspendAllFrames = (global::System.Boolean)Value;
        }
        private object get_12_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_13_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_13_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_14_ViewModelLocator_ActivePage(object instance)
        {
            var that = (global::TZDriver.ViewModels.ViewModelLocator)instance;
            return that.ActivePage;
        }
        private object get_15_ViewModelLocator_TripPage(object instance)
        {
            var that = (global::TZDriver.ViewModels.ViewModelLocator)instance;
            return that.TripPage;
        }
        private object get_16_ViewModelLocator_ClosedPage(object instance)
        {
            var that = (global::TZDriver.ViewModels.ViewModelLocator)instance;
            return that.ClosedPage;
        }
        private object get_17_TextboxControl_BackgroundOverlay(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TextboxControl)instance;
            return that.BackgroundOverlay;
        }
        private void set_17_TextboxControl_BackgroundOverlay(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TextboxControl)instance;
            that.BackgroundOverlay = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_18_TextboxControl_ForegroundOverlay(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TextboxControl)instance;
            return that.ForegroundOverlay;
        }
        private void set_18_TextboxControl_ForegroundOverlay(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TextboxControl)instance;
            that.ForegroundOverlay = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_19_AddJobDialog_DiagResult(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.DiagResult;
        }
        private void set_19_AddJobDialog_DiagResult(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.DiagResult = (global::Windows.UI.Xaml.Controls.ContentDialogResult)Value;
        }
        private object get_20_AddJobDialog_NewTrip(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.NewTrip;
        }
        private void set_20_AddJobDialog_NewTrip(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.NewTrip = (global::TZDriver.Models.DataModels.TripData)Value;
        }
        private object get_21_AddJobDialog_JobTypeList(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.JobTypeList;
        }
        private void set_21_AddJobDialog_JobTypeList(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.JobTypeList = (global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.ServiceType>)Value;
        }
        private object get_22_AddJobDialog_SelectedJobType(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.SelectedJobType;
        }
        private void set_22_AddJobDialog_SelectedJobType(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.SelectedJobType = (global::TZDriver.Models.Tools.Utilities.ServiceType)Value;
        }
        private object get_23_AddJobDialog_SelectedPayMode(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.SelectedPayMode;
        }
        private void set_23_AddJobDialog_SelectedPayMode(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.SelectedPayMode = (global::TZDriver.Models.Tools.Utilities.TripPayMode)Value;
        }
        private object get_24_AddJobDialog_PayModeList(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.PayModeList;
        }
        private void set_24_AddJobDialog_PayModeList(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.PayModeList = (global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayMode>)Value;
        }
        private object get_25_AddJobDialog_DefaultIndex(object instance)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            return that.DefaultIndex;
        }
        private void set_25_AddJobDialog_DefaultIndex(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.AddJobDialog)instance;
            that.DefaultIndex = (global::System.Int32)Value;
        }
        private object get_26_CountdownControl_Seconds(object instance)
        {
            var that = (global::TZDriver.Controls.CountdownControl)instance;
            return that.Seconds;
        }
        private void set_26_CountdownControl_Seconds(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.CountdownControl)instance;
            that.Seconds = (global::System.Int32)Value;
        }
        private object get_27_BeginDialog_DiagResult(object instance)
        {
            var that = (global::TZDriver.Controls.BeginDialog)instance;
            return that.DiagResult;
        }
        private void set_27_BeginDialog_DiagResult(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.BeginDialog)instance;
            that.DiagResult = (global::Windows.UI.Xaml.Controls.ContentDialogResult)Value;
        }
        private object get_28_TripViewControl_Views(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.Views;
        }
        private void set_28_TripViewControl_Views(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.Views = (global::System.Collections.Generic.List<global::Windows.UI.Xaml.FrameworkElement>)Value;
        }
        private object get_29_TripViewControl_DisplayIndex(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.DisplayIndex;
        }
        private void set_29_TripViewControl_DisplayIndex(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.DisplayIndex = (global::System.Int32)Value;
        }
        private object get_30_TripViewControl_AllowTapToFlip(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.AllowTapToFlip;
        }
        private void set_30_TripViewControl_AllowTapToFlip(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.AllowTapToFlip = (global::System.Boolean)Value;
        }
        private object get_31_TripViewControl_RotationAxis(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.RotationAxis;
        }
        private void set_31_TripViewControl_RotationAxis(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.RotationAxis = (global::TZDriver.Models.Tools.Utilities.RotateAxis)Value;
        }
        private object get_32_TripViewControl_FlipDirection(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.FlipDirection;
        }
        private void set_32_TripViewControl_FlipDirection(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.FlipDirection = (global::TZDriver.Models.Tools.Utilities.Direction)Value;
        }
        private object get_33_TripViewControl_AnimationDuration(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.AnimationDuration;
        }
        private void set_33_TripViewControl_AnimationDuration(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.AnimationDuration = (global::System.Int32)Value;
        }
        private object get_34_TripViewControl_EnablePerspect(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.EnablePerspect;
        }
        private void set_34_TripViewControl_EnablePerspect(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.EnablePerspect = (global::System.Boolean)Value;
        }
        private object get_35_TripViewControl_TripDuration(object instance)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            return that.TripDuration;
        }
        private void set_35_TripViewControl_TripDuration(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.TripViewControl)instance;
            that.TripDuration = (global::System.Double)Value;
        }
        private object get_36_BackDrop_BlurAmount(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            return that.BlurAmount;
        }
        private void set_36_BackDrop_BlurAmount(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            that.BlurAmount = (global::System.Double)Value;
        }
        private object get_37_BackDrop_TintColor(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            return that.TintColor;
        }
        private void set_37_BackDrop_TintColor(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            that.TintColor = (global::Windows.UI.Color)Value;
        }
        private object get_38_BackDrop_TintAlpha(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            return that.TintAlpha;
        }
        private void set_38_BackDrop_TintAlpha(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            that.TintAlpha = (global::System.Int32)Value;
        }
        private object get_39_BackDrop_SaturationIntensity(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            return that.SaturationIntensity;
        }
        private void set_39_BackDrop_SaturationIntensity(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.BackDrop)instance;
            that.SaturationIntensity = (global::System.Double)Value;
        }
        private object get_40_RingSlice_InnerRadius(object instance)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            return that.InnerRadius;
        }
        private void set_40_RingSlice_InnerRadius(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            that.InnerRadius = (global::System.Double)Value;
        }
        private object get_41_RingSlice_Radius(object instance)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            return that.Radius;
        }
        private void set_41_RingSlice_Radius(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_42_RingSlice_StartAngle(object instance)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            return that.StartAngle;
        }
        private void set_42_RingSlice_StartAngle(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_43_RingSlice_EndAngle(object instance)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            return that.EndAngle;
        }
        private void set_43_RingSlice_EndAngle(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_44_RingSlice_Center(object instance)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            return that.Center;
        }
        private void set_44_RingSlice_Center(object instance, object Value)
        {
            var that = (global::TZDriver.Models.Controls.RingSlice)instance;
            that.Center = (global::System.Nullable<global::Windows.Foundation.Point>)Value;
        }
        private object get_45_EndDialog_DiagResult(object instance)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            return that.DiagResult;
        }
        private void set_45_EndDialog_DiagResult(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            that.DiagResult = (global::Windows.UI.Xaml.Controls.ContentDialogResult)Value;
        }
        private object get_46_EndDialog_SelectedPayMode(object instance)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            return that.SelectedPayMode;
        }
        private void set_46_EndDialog_SelectedPayMode(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            that.SelectedPayMode = (global::TZDriver.Models.Tools.Utilities.TripPayMode)Value;
        }
        private object get_47_EndDialog_PayModeList(object instance)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            return that.PayModeList;
        }
        private void set_47_EndDialog_PayModeList(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            that.PayModeList = (global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayMode>)Value;
        }
        private object get_48_EndDialog_SelectedPayStatus(object instance)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            return that.SelectedPayStatus;
        }
        private void set_48_EndDialog_SelectedPayStatus(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            that.SelectedPayStatus = (global::TZDriver.Models.Tools.Utilities.TripPayStatus)Value;
        }
        private object get_49_EndDialog_PayStatusList(object instance)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            return that.PayStatusList;
        }
        private void set_49_EndDialog_PayStatusList(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            that.PayStatusList = (global::System.Collections.Generic.List<global::TZDriver.Models.Tools.Utilities.TripPayStatus>)Value;
        }
        private object get_50_EndDialog_DefaultIndex(object instance)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            return that.DefaultIndex;
        }
        private void set_50_EndDialog_DefaultIndex(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.EndDialog)instance;
            that.DefaultIndex = (global::System.Int32)Value;
        }
        private object get_51_Navigation_LocationAccuraccy(object instance)
        {
            var that = (global::TZDriver.Controls.Navigation)instance;
            return that.LocationAccuraccy;
        }
        private void set_51_Navigation_LocationAccuraccy(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.Navigation)instance;
            that.LocationAccuraccy = (global::System.Double)Value;
        }
        private object get_52_Rating_Maximum(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.Maximum;
        }
        private void set_52_Rating_Maximum(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.Maximum = (global::System.Int32)Value;
        }
        private object get_53_Rating_EmptyImage(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.EmptyImage;
        }
        private void set_53_Rating_EmptyImage(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.EmptyImage = (global::System.Uri)Value;
        }
        private object get_54_Rating_FilledImage(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.FilledImage;
        }
        private void set_54_Rating_FilledImage(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.FilledImage = (global::System.Uri)Value;
        }
        private object get_55_Rating_IsInteractive(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.IsInteractive;
        }
        private void set_55_Rating_IsInteractive(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.IsInteractive = (global::System.Boolean)Value;
        }
        private object get_56_Rating_ItemHeight(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.ItemHeight;
        }
        private void set_56_Rating_ItemHeight(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.ItemHeight = (global::System.Int32)Value;
        }
        private object get_57_Rating_ItemPadding(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.ItemPadding;
        }
        private void set_57_Rating_ItemPadding(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.ItemPadding = (global::System.Int32)Value;
        }
        private object get_58_Rating_StepFrequency(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.StepFrequency;
        }
        private void set_58_Rating_StepFrequency(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.StepFrequency = (global::System.Double)Value;
        }
        private object get_59_Rating_Value(object instance)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            return that.Value;
        }
        private void set_59_Rating_Value(object instance, object Value)
        {
            var that = (global::XamlBrewer.Uwp.Controls.Rating)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_60_PickupControl_Radius(object instance)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            return that.Radius;
        }
        private void set_60_PickupControl_Radius(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            that.Radius = (global::System.Int32)Value;
        }
        private object get_61_PickupControl_SegmentColor(object instance)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            return that.SegmentColor;
        }
        private void set_61_PickupControl_SegmentColor(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            that.SegmentColor = (global::Windows.UI.Xaml.Media.GradientBrush)Value;
        }
        private object get_62_PickupControl_StrokeThickness(object instance)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            return that.StrokeThickness;
        }
        private void set_62_PickupControl_StrokeThickness(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            that.StrokeThickness = (global::System.Int32)Value;
        }
        private object get_63_PickupControl_RemainMinutes(object instance)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            return that.RemainMinutes;
        }
        private void set_63_PickupControl_RemainMinutes(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            that.RemainMinutes = (global::System.Double)Value;
        }
        private object get_64_PickupControl_Angle(object instance)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            return that.Angle;
        }
        private void set_64_PickupControl_Angle(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.PickupControl)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_65_TripMapControl_DiagResult(object instance)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            return that.DiagResult;
        }
        private void set_65_TripMapControl_DiagResult(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            that.DiagResult = (global::Windows.UI.Xaml.Controls.ContentDialogResult)Value;
        }
        private object get_66_TripMapControl_SelectedPayMode(object instance)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            return that.SelectedPayMode;
        }
        private void set_66_TripMapControl_SelectedPayMode(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            that.SelectedPayMode = (global::TZDriver.Models.Tools.Utilities.TripPayMode)Value;
        }
        private object get_67_TripMapControl_SelectedPayStatus(object instance)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            return that.SelectedPayStatus;
        }
        private void set_67_TripMapControl_SelectedPayStatus(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            that.SelectedPayStatus = (global::TZDriver.Models.Tools.Utilities.TripPayStatus)Value;
        }
        private object get_68_TripMapControl_TripDistance(object instance)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            return that.TripDistance;
        }
        private void set_68_TripMapControl_TripDistance(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            that.TripDistance = (global::System.Double)Value;
        }
        private object get_69_TripMapControl_IsBusy(object instance)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            return that.IsBusy;
        }
        private void set_69_TripMapControl_IsBusy(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.TripMapControl)instance;
            that.IsBusy = (global::System.Boolean)Value;
        }
        private object get_70_TripSummary_IsBusy(object instance)
        {
            var that = (global::TZDriver.Controls.TripSummary)instance;
            return that.IsBusy;
        }
        private void set_70_TripSummary_IsBusy(object instance, object Value)
        {
            var that = (global::TZDriver.Controls.TripSummary)instance;
            that.IsBusy = (global::System.Boolean)Value;
        }
        private object get_71_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_71_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_72_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_72_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_73_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_73_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_74_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_74_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_75_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_75_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_76_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_76_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_77_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_77_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_78_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_78_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_79_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_79_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_80_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_80_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_81_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_81_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_82_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_82_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_83_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_83_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_84_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_84_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_85_Trigger_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Trigger)instance;
            return that.Actions;
        }
        private object get_86_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_86_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_87_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_87_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_88_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior)instance;
            return that.AssociatedObject;
        }
        private object get_89_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_89_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_90_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_90_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_91_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_91_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_92_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_92_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_93_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_93_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_94_ValueWhenConverter_When(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.When;
        }
        private void set_94_ValueWhenConverter_When(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.When = (global::System.Object)Value;
        }
        private object get_95_ValueWhenConverter_Value(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Value;
        }
        private void set_95_ValueWhenConverter_Value(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_96_ValueWhenConverter_Otherwise(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Otherwise;
        }
        private void set_96_ValueWhenConverter_Otherwise(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Otherwise = (global::System.Object)Value;
        }
        private object get_97_ValueWhenConverter_OtherwiseValueBack(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.OtherwiseValueBack;
        }
        private void set_97_ValueWhenConverter_OtherwiseValueBack(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.OtherwiseValueBack = (global::System.Object)Value;
        }
        private object get_98_ValueWhenConverter_Debug(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Debug;
        }
        private void set_98_ValueWhenConverter_Debug(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Debug = (global::System.Boolean)Value;
        }
        private object get_99_FlyoutHelper_IsOpen(object instance)
        {
            return global::TZDriver.Models.Tools.Helpers.FlyoutHelper.GetIsOpen((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_99_FlyoutHelper_IsOpen(object instance, object Value)
        {
            global::TZDriver.Models.Tools.Helpers.FlyoutHelper.SetIsOpen((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Boolean)Value);
        }
        private object get_100_FlyoutHelper_Parent(object instance)
        {
            return global::TZDriver.Models.Tools.Helpers.FlyoutHelper.GetParent((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_100_FlyoutHelper_Parent(object instance, object Value)
        {
            global::TZDriver.Models.Tools.Helpers.FlyoutHelper.SetParent((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Xaml.FrameworkElement)Value);
        }
        private object get_101_DriveStateTrigger_DriveState(object instance)
        {
            var that = (global::TZDriver.Utilities.DriveStateTrigger)instance;
            return that.DriveState;
        }
        private void set_101_DriveStateTrigger_DriveState(object instance, object Value)
        {
            var that = (global::TZDriver.Utilities.DriveStateTrigger)instance;
            that.DriveState = (global::System.String)Value;
        }
        private object get_102_DriveStateTrigger_DriveStatus(object instance)
        {
            var that = (global::TZDriver.Utilities.DriveStateTrigger)instance;
            return that.DriveStatus;
        }
        private void set_102_DriveStateTrigger_DriveStatus(object instance, object Value)
        {
            var that = (global::TZDriver.Utilities.DriveStateTrigger)instance;
            that.DriveStatus = (global::TZDriver.Models.Tools.Utilities.DriveStateStatus)Value;
        }
        private object get_103_TripView_vm(object instance)
        {
            var that = (global::TZDriver.Views.TripView)instance;
            return that.vm;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::TZDriver.TZDriver_XamlTypeInfo.XamlMember xamlMember = null;
            global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.StateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_1_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_2_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_3_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_3_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_4_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_4_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_5_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_5_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_6_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootStrapper.States");
                xamlMember.Getter = get_7_BootStrapper_CurrentState;
                xamlMember.Setter = set_7_BootStrapper_CurrentState;
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoRestoreAfterTerminated":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "AutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_9_BootStrapper_AutoRestoreAfterTerminated;
                xamlMember.Setter = set_9_BootStrapper_AutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoExtendExecutionSession":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "AutoExtendExecutionSession", "Boolean");
                xamlMember.Getter = get_10_BootStrapper_AutoExtendExecutionSession;
                xamlMember.Setter = set_10_BootStrapper_AutoExtendExecutionSession;
                break;
            case "Template10.Common.BootStrapper.AutoSuspendAllFrames":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "AutoSuspendAllFrames", "Boolean");
                xamlMember.Getter = get_11_BootStrapper_AutoSuspendAllFrames;
                xamlMember.Setter = set_11_BootStrapper_AutoSuspendAllFrames;
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_12_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_13_BootStrapper_ModalContent;
                xamlMember.Setter = set_13_BootStrapper_ModalContent;
                break;
            case "TZDriver.ViewModels.ViewModelLocator.ActivePage":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.ViewModels.ViewModelLocator");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ActivePage", "TZDriver.ViewModels.ActiveTripViewModel");
                xamlMember.Getter = get_14_ViewModelLocator_ActivePage;
                xamlMember.SetIsReadOnly();
                break;
            case "TZDriver.ViewModels.ViewModelLocator.TripPage":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.ViewModels.ViewModelLocator");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "TripPage", "TZDriver.ViewModels.TripViewModel");
                xamlMember.Getter = get_15_ViewModelLocator_TripPage;
                xamlMember.SetIsReadOnly();
                break;
            case "TZDriver.ViewModels.ViewModelLocator.ClosedPage":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.ViewModels.ViewModelLocator");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ClosedPage", "TZDriver.ViewModels.ClosedTripViewModel");
                xamlMember.Getter = get_16_ViewModelLocator_ClosedPage;
                xamlMember.SetIsReadOnly();
                break;
            case "TZDriver.Models.Controls.TextboxControl.BackgroundOverlay":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TextboxControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "BackgroundOverlay", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_TextboxControl_BackgroundOverlay;
                xamlMember.Setter = set_17_TextboxControl_BackgroundOverlay;
                break;
            case "TZDriver.Models.Controls.TextboxControl.ForegroundOverlay":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TextboxControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ForegroundOverlay", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_TextboxControl_ForegroundOverlay;
                xamlMember.Setter = set_18_TextboxControl_ForegroundOverlay;
                break;
            case "TZDriver.Controls.AddJobDialog.DiagResult":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DiagResult", "Windows.UI.Xaml.Controls.ContentDialogResult");
                xamlMember.Getter = get_19_AddJobDialog_DiagResult;
                xamlMember.Setter = set_19_AddJobDialog_DiagResult;
                break;
            case "TZDriver.Controls.AddJobDialog.NewTrip":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "NewTrip", "TZDriver.Models.DataModels.TripData");
                xamlMember.Getter = get_20_AddJobDialog_NewTrip;
                xamlMember.Setter = set_20_AddJobDialog_NewTrip;
                break;
            case "TZDriver.Controls.AddJobDialog.JobTypeList":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "JobTypeList", "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.ServiceType>");
                xamlMember.Getter = get_21_AddJobDialog_JobTypeList;
                xamlMember.Setter = set_21_AddJobDialog_JobTypeList;
                break;
            case "TZDriver.Controls.AddJobDialog.SelectedJobType":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SelectedJobType", "TZDriver.Models.Tools.Utilities.ServiceType");
                xamlMember.Getter = get_22_AddJobDialog_SelectedJobType;
                xamlMember.Setter = set_22_AddJobDialog_SelectedJobType;
                break;
            case "TZDriver.Controls.AddJobDialog.SelectedPayMode":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SelectedPayMode", "TZDriver.Models.Tools.Utilities.TripPayMode");
                xamlMember.Getter = get_23_AddJobDialog_SelectedPayMode;
                xamlMember.Setter = set_23_AddJobDialog_SelectedPayMode;
                break;
            case "TZDriver.Controls.AddJobDialog.PayModeList":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "PayModeList", "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayMode>");
                xamlMember.Getter = get_24_AddJobDialog_PayModeList;
                xamlMember.Setter = set_24_AddJobDialog_PayModeList;
                break;
            case "TZDriver.Controls.AddJobDialog.DefaultIndex":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.AddJobDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DefaultIndex", "Int32");
                xamlMember.Getter = get_25_AddJobDialog_DefaultIndex;
                xamlMember.Setter = set_25_AddJobDialog_DefaultIndex;
                break;
            case "TZDriver.Controls.CountdownControl.Seconds":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.CountdownControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Seconds", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_CountdownControl_Seconds;
                xamlMember.Setter = set_26_CountdownControl_Seconds;
                break;
            case "TZDriver.Controls.BeginDialog.DiagResult":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.BeginDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DiagResult", "Windows.UI.Xaml.Controls.ContentDialogResult");
                xamlMember.Getter = get_27_BeginDialog_DiagResult;
                xamlMember.Setter = set_27_BeginDialog_DiagResult;
                break;
            case "TZDriver.Models.Controls.TripViewControl.Views":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Views", "System.Collections.Generic.List`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember.Getter = get_28_TripViewControl_Views;
                xamlMember.Setter = set_28_TripViewControl_Views;
                break;
            case "TZDriver.Models.Controls.TripViewControl.DisplayIndex":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DisplayIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_TripViewControl_DisplayIndex;
                xamlMember.Setter = set_29_TripViewControl_DisplayIndex;
                break;
            case "TZDriver.Models.Controls.TripViewControl.AllowTapToFlip":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "AllowTapToFlip", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_TripViewControl_AllowTapToFlip;
                xamlMember.Setter = set_30_TripViewControl_AllowTapToFlip;
                break;
            case "TZDriver.Models.Controls.TripViewControl.RotationAxis":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "RotationAxis", "TZDriver.Models.Tools.Utilities.RotateAxis");
                xamlMember.Getter = get_31_TripViewControl_RotationAxis;
                xamlMember.Setter = set_31_TripViewControl_RotationAxis;
                break;
            case "TZDriver.Models.Controls.TripViewControl.FlipDirection":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "FlipDirection", "TZDriver.Models.Tools.Utilities.Direction");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_TripViewControl_FlipDirection;
                xamlMember.Setter = set_32_TripViewControl_FlipDirection;
                break;
            case "TZDriver.Models.Controls.TripViewControl.AnimationDuration":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "AnimationDuration", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_TripViewControl_AnimationDuration;
                xamlMember.Setter = set_33_TripViewControl_AnimationDuration;
                break;
            case "TZDriver.Models.Controls.TripViewControl.EnablePerspect":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EnablePerspect", "Boolean");
                xamlMember.Getter = get_34_TripViewControl_EnablePerspect;
                xamlMember.Setter = set_34_TripViewControl_EnablePerspect;
                break;
            case "TZDriver.Models.Controls.TripViewControl.TripDuration":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.TripViewControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "TripDuration", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_TripViewControl_TripDuration;
                xamlMember.Setter = set_35_TripViewControl_TripDuration;
                break;
            case "XamlBrewer.Uwp.Controls.BackDrop.BlurAmount":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.BackDrop");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "BlurAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_BackDrop_BlurAmount;
                xamlMember.Setter = set_36_BackDrop_BlurAmount;
                break;
            case "XamlBrewer.Uwp.Controls.BackDrop.TintColor":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.BackDrop");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "TintColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_BackDrop_TintColor;
                xamlMember.Setter = set_37_BackDrop_TintColor;
                break;
            case "XamlBrewer.Uwp.Controls.BackDrop.TintAlpha":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.BackDrop");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "TintAlpha", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_BackDrop_TintAlpha;
                xamlMember.Setter = set_38_BackDrop_TintAlpha;
                break;
            case "XamlBrewer.Uwp.Controls.BackDrop.SaturationIntensity":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.BackDrop");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SaturationIntensity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_BackDrop_SaturationIntensity;
                xamlMember.Setter = set_39_BackDrop_SaturationIntensity;
                break;
            case "TZDriver.Models.Controls.RingSlice.InnerRadius":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.RingSlice");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "InnerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_RingSlice_InnerRadius;
                xamlMember.Setter = set_40_RingSlice_InnerRadius;
                break;
            case "TZDriver.Models.Controls.RingSlice.Radius":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.RingSlice");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_RingSlice_Radius;
                xamlMember.Setter = set_41_RingSlice_Radius;
                break;
            case "TZDriver.Models.Controls.RingSlice.StartAngle":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.RingSlice");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_RingSlice_StartAngle;
                xamlMember.Setter = set_42_RingSlice_StartAngle;
                break;
            case "TZDriver.Models.Controls.RingSlice.EndAngle":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.RingSlice");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_RingSlice_EndAngle;
                xamlMember.Setter = set_43_RingSlice_EndAngle;
                break;
            case "TZDriver.Models.Controls.RingSlice.Center":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Controls.RingSlice");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Center", "System.Nullable`1<Windows.Foundation.Point>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_RingSlice_Center;
                xamlMember.Setter = set_44_RingSlice_Center;
                break;
            case "TZDriver.Controls.EndDialog.DiagResult":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.EndDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DiagResult", "Windows.UI.Xaml.Controls.ContentDialogResult");
                xamlMember.Getter = get_45_EndDialog_DiagResult;
                xamlMember.Setter = set_45_EndDialog_DiagResult;
                break;
            case "TZDriver.Controls.EndDialog.SelectedPayMode":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.EndDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SelectedPayMode", "TZDriver.Models.Tools.Utilities.TripPayMode");
                xamlMember.Getter = get_46_EndDialog_SelectedPayMode;
                xamlMember.Setter = set_46_EndDialog_SelectedPayMode;
                break;
            case "TZDriver.Controls.EndDialog.PayModeList":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.EndDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "PayModeList", "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayMode>");
                xamlMember.Getter = get_47_EndDialog_PayModeList;
                xamlMember.Setter = set_47_EndDialog_PayModeList;
                break;
            case "TZDriver.Controls.EndDialog.SelectedPayStatus":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.EndDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SelectedPayStatus", "TZDriver.Models.Tools.Utilities.TripPayStatus");
                xamlMember.Getter = get_48_EndDialog_SelectedPayStatus;
                xamlMember.Setter = set_48_EndDialog_SelectedPayStatus;
                break;
            case "TZDriver.Controls.EndDialog.PayStatusList":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.EndDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "PayStatusList", "System.Collections.Generic.List`1<TZDriver.Models.Tools.Utilities.TripPayStatus>");
                xamlMember.Getter = get_49_EndDialog_PayStatusList;
                xamlMember.Setter = set_49_EndDialog_PayStatusList;
                break;
            case "TZDriver.Controls.EndDialog.DefaultIndex":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.EndDialog");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DefaultIndex", "Int32");
                xamlMember.Getter = get_50_EndDialog_DefaultIndex;
                xamlMember.Setter = set_50_EndDialog_DefaultIndex;
                break;
            case "TZDriver.Controls.Navigation.LocationAccuraccy":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.Navigation");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "LocationAccuraccy", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_Navigation_LocationAccuraccy;
                xamlMember.Setter = set_51_Navigation_LocationAccuraccy;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.Maximum":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Maximum", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_Rating_Maximum;
                xamlMember.Setter = set_52_Rating_Maximum;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.EmptyImage":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EmptyImage", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_Rating_EmptyImage;
                xamlMember.Setter = set_53_Rating_EmptyImage;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.FilledImage":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "FilledImage", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_Rating_FilledImage;
                xamlMember.Setter = set_54_Rating_FilledImage;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.IsInteractive":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "IsInteractive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_Rating_IsInteractive;
                xamlMember.Setter = set_55_Rating_IsInteractive;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.ItemHeight":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ItemHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_Rating_ItemHeight;
                xamlMember.Setter = set_56_Rating_ItemHeight;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.ItemPadding":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "ItemPadding", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_Rating_ItemPadding;
                xamlMember.Setter = set_57_Rating_ItemPadding;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.StepFrequency":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "StepFrequency", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_Rating_StepFrequency;
                xamlMember.Setter = set_58_Rating_StepFrequency;
                break;
            case "XamlBrewer.Uwp.Controls.Rating.Value":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlBrewer.Uwp.Controls.Rating");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_Rating_Value;
                xamlMember.Setter = set_59_Rating_Value;
                break;
            case "TZDriver.Controls.PickupControl.Radius":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.PickupControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Radius", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_PickupControl_Radius;
                xamlMember.Setter = set_60_PickupControl_Radius;
                break;
            case "TZDriver.Controls.PickupControl.SegmentColor":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.PickupControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SegmentColor", "Windows.UI.Xaml.Media.GradientBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_PickupControl_SegmentColor;
                xamlMember.Setter = set_61_PickupControl_SegmentColor;
                break;
            case "TZDriver.Controls.PickupControl.StrokeThickness":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.PickupControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_PickupControl_StrokeThickness;
                xamlMember.Setter = set_62_PickupControl_StrokeThickness;
                break;
            case "TZDriver.Controls.PickupControl.RemainMinutes":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.PickupControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "RemainMinutes", "Double");
                xamlMember.Getter = get_63_PickupControl_RemainMinutes;
                xamlMember.Setter = set_63_PickupControl_RemainMinutes;
                break;
            case "TZDriver.Controls.PickupControl.Angle":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.PickupControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_PickupControl_Angle;
                xamlMember.Setter = set_64_PickupControl_Angle;
                break;
            case "TZDriver.Controls.TripMapControl.DiagResult":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.TripMapControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DiagResult", "Windows.UI.Xaml.Controls.ContentDialogResult");
                xamlMember.Getter = get_65_TripMapControl_DiagResult;
                xamlMember.Setter = set_65_TripMapControl_DiagResult;
                break;
            case "TZDriver.Controls.TripMapControl.SelectedPayMode":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.TripMapControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SelectedPayMode", "TZDriver.Models.Tools.Utilities.TripPayMode");
                xamlMember.Getter = get_66_TripMapControl_SelectedPayMode;
                xamlMember.Setter = set_66_TripMapControl_SelectedPayMode;
                break;
            case "TZDriver.Controls.TripMapControl.SelectedPayStatus":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.TripMapControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SelectedPayStatus", "TZDriver.Models.Tools.Utilities.TripPayStatus");
                xamlMember.Getter = get_67_TripMapControl_SelectedPayStatus;
                xamlMember.Setter = set_67_TripMapControl_SelectedPayStatus;
                break;
            case "TZDriver.Controls.TripMapControl.TripDistance":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.TripMapControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "TripDistance", "Double");
                xamlMember.Getter = get_68_TripMapControl_TripDistance;
                xamlMember.Setter = set_68_TripMapControl_TripDistance;
                break;
            case "TZDriver.Controls.TripMapControl.IsBusy":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.TripMapControl");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_TripMapControl_IsBusy;
                xamlMember.Setter = set_69_TripMapControl_IsBusy;
                break;
            case "TZDriver.Controls.TripSummary.IsBusy":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Controls.TripSummary");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_TripSummary_IsBusy;
                xamlMember.Setter = set_70_TripSummary_IsBusy;
                break;
            case "Windows.UI.Color.A":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_71_Color_A;
                xamlMember.Setter = set_71_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_72_Color_B;
                xamlMember.Setter = set_72_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_73_Color_G;
                xamlMember.Setter = set_73_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_74_Color_R;
                xamlMember.Setter = set_74_Color_R;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_75_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_76_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_77_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_PageHeader_BackButtonContent;
                xamlMember.Setter = set_78_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_PageHeader_Frame;
                xamlMember.Setter = set_79_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_80_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_81_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_82_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_PageHeader_Text;
                xamlMember.Setter = set_83_PageHeader_Text;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_84_Interaction_Behaviors;
                xamlMember.Setter = set_84_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactivity.Trigger.Actions":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Trigger");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Trigger_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_86_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_87_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior.AssociatedObject":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_88_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_InvokeCommandAction_Command;
                xamlMember.Setter = set_89_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_90_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_91_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_92_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_93_InvokeCommandAction_InputConverterLanguage;
                break;
            case "Template10.Converters.ValueWhenConverter.When":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "When", "Object");
                xamlMember.Getter = get_94_ValueWhenConverter_When;
                xamlMember.Setter = set_94_ValueWhenConverter_When;
                break;
            case "Template10.Converters.ValueWhenConverter.Value":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.Getter = get_95_ValueWhenConverter_Value;
                xamlMember.Setter = set_95_ValueWhenConverter_Value;
                break;
            case "Template10.Converters.ValueWhenConverter.Otherwise":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Otherwise", "Object");
                xamlMember.Getter = get_96_ValueWhenConverter_Otherwise;
                xamlMember.Setter = set_96_ValueWhenConverter_Otherwise;
                break;
            case "Template10.Converters.ValueWhenConverter.OtherwiseValueBack":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "OtherwiseValueBack", "Object");
                xamlMember.Getter = get_97_ValueWhenConverter_OtherwiseValueBack;
                xamlMember.Setter = set_97_ValueWhenConverter_OtherwiseValueBack;
                break;
            case "Template10.Converters.ValueWhenConverter.Debug":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Debug", "Boolean");
                xamlMember.Getter = get_98_ValueWhenConverter_Debug;
                xamlMember.Setter = set_98_ValueWhenConverter_Debug;
                break;
            case "TZDriver.Models.Tools.Helpers.FlyoutHelper.IsOpen":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Tools.Helpers.FlyoutHelper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_99_FlyoutHelper_IsOpen;
                xamlMember.Setter = set_99_FlyoutHelper_IsOpen;
                break;
            case "TZDriver.Models.Tools.Helpers.FlyoutHelper.Parent":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Models.Tools.Helpers.FlyoutHelper");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "Parent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_100_FlyoutHelper_Parent;
                xamlMember.Setter = set_100_FlyoutHelper_Parent;
                break;
            case "TZDriver.Utilities.DriveStateTrigger.DriveState":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Utilities.DriveStateTrigger");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DriveState", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_DriveStateTrigger_DriveState;
                xamlMember.Setter = set_101_DriveStateTrigger_DriveState;
                break;
            case "TZDriver.Utilities.DriveStateTrigger.DriveStatus":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Utilities.DriveStateTrigger");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "DriveStatus", "TZDriver.Models.Tools.Utilities.DriveStateStatus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_DriveStateTrigger_DriveStatus;
                xamlMember.Setter = set_102_DriveStateTrigger_DriveStatus;
                break;
            case "TZDriver.Views.TripView.vm":
                userType = (global::TZDriver.TZDriver_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TZDriver.Views.TripView");
                xamlMember = new global::TZDriver.TZDriver_XamlTypeInfo.XamlMember(this, "vm", "TZDriver.ViewModels.TripViewModel");
                xamlMember.Getter = get_103_TripView_vm;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::TZDriver.TZDriver_XamlTypeInfo.XamlSystemBaseType
    {
        global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::TZDriver.TZDriver_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

